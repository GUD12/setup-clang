name: Install Clang
description: Install Clang & LLVM

inputs:
  platform:
    description: Target platform
    required: false
    default: x64
  cygwin:
    description: Install inside Cygwin
    required: false
    default: 0

runs:
  using: composite
  steps:
    - run: |
        New-Variable os -Value '${{ runner.os }}' -Option Constant

        New-Variable linux_host -Value ($os -eq 'Linux') -Option Constant
        New-Variable cygwin_host -Value ('${{ inputs.cygwin }}' -eq '1') -Option Constant
        New-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin) -Option Constant

        New-Variable x64 -Value ('${{ inputs.platform }}' -eq 'x64') -Option Constant

        function Locate-Choco {
            $path = Get-Command 'choco' -ErrorAction SilentlyContinue
            if ($path) {
                $path.Path
            } else {
                Join-Path ${env:ProgramData} 'chocolatey' 'bin' 'choco'
            }
        }

        function Install-Package {
            param(
                [Parameter(Mandatory=$true, ValueFromRemainingArguments=$true)]
                [string[]] $Packages
            )

            if ($script:linux_host) {
                sudo apt-get update -yq
                sudo apt-get install -yq --no-install-recommends $Packages
            } elseif ($script:cygwin_host) {
                $choco = Locate-Choco
                & $choco install -y --no-progress --source=cygwin $Packages
            } elseif ($script:windows_host) {
                $choco = Locate-Choco
                & $choco install -y --no-progress $Packages
            } else {
                throw "Sorry, installing packages is unsupported on $script:os"
            }
        }

        function Convert-CygwinPath {
            # Like cygpath -wa, but don't resolve symlinks.
            param(
                [Parameter(Mandatory=$true)]
                [string] $Path
            )
            $Path = realpath.exe --no-symlinks -- $Path
            $dirname = dirname.exe -- $Path
            $dirname = cygpath.exe -wa $dirname
            Join-Path $dirname (Split-Path $Path -Leaf)
        }

        if ($linux_host) {
            $pkgs = @('clang')
            $pkgs += if ($x64) { 'g++' } else { 'g++-multilib' }
            Install-Package $pkgs
        } elseif ($cygwin_host) {
            if (!$x64) {
                echo @'
        ::warning ::
        32-bit-targeting Clang is unavailable on 64-bit Cygwin.
        Please use 32-bit Cygwin instead.
        If you _are_ using 32-bit Cygwin, please ignore this message.
        '@
            }
            # IDK why, but without libiconv-devel, even a "Hello, world!"
            # C++ app cannot be compiled as of December 2020. Also, libstdc++
            # is required; it's simpler to install gcc-g++ for all the
            # dependencies.
            Install-Package clang libiconv-devel gcc-g++

            # clang/clang++ are Cygwin symlinks, pointing to clang-X.exe. It's
            # convenient to make proper executables instead so that they can be
            # called from Windows' command prompt.
            find.exe /usr/bin -iname 'clang*' -type l | %{
                $link_path = $_
                $dest_path = readlink.exe --canonicalize-existing -- $link_path
                $link_winpath = Convert-CygwinPath $link_path
                $dest_winpath = Convert-CygwinPath $dest_path
                echo "Removing symlink: $link_winpath"
                Remove-Item $link_winpath -Force
                echo "Creating hardlink '$link_winpath.exe', pointing to '$dest_winpath'"
                New-Item -ItemType HardLink -Path "$link_winpath.exe" -Value $dest_winpath | Out-Null
            }
        } elseif ($windows_host) {
            Install-Package llvm
            echo (Join-Path $env:ProgramFiles LLVM bin) >> $env:GITHUB_PATH
        } else {
            throw "Sorry, installing Clang is unsupported on $os"
        }
      shell: pwsh

branding:
  icon: star
  color: green
