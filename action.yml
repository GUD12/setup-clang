name: Install Clang
description: Install Clang & LLVM

inputs:
  platform:
    description: Target platform
    required: false
    default: x64
  cygwin:
    description: Install inside Cygwin
    required: false
    default: 0

runs:
  using: composite
  steps:
    - run: |
        New-Variable os -Value '${{ runner.os }}' -Option Constant

        New-Variable linux_host -Value ($os -eq 'Linux') -Option Constant
        New-Variable cygwin_host -Value ('${{ inputs.cygwin }}' -eq '1') -Option Constant
        New-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin) -Option Constant

        New-Variable x64 -Value ('${{ inputs.platform }}' -eq 'x64') -Option Constant

        function Locate-Choco {
            $path = Get-Command 'choco' -ErrorAction SilentlyContinue
            if ($path) {
                $path.Path
            } else {
                Join-Path ${env:ProgramData} 'chocolatey' 'bin' 'choco'
            }
        }

        function Install-Package {
            param(
                [Parameter(Mandatory=$true, ValueFromRemainingArguments=$true)]
                [string[]] $Packages
            )

            if ($script:linux_host) {
                sudo apt-get update -yq
                sudo apt-get install -yq --no-install-recommends $Packages
            } elseif ($script:cygwin_host) {
                $choco = Locate-Choco
                & $choco install -y --no-progress --source=cygwin $Packages
            } elseif ($script:windows_host) {
                $choco = Locate-Choco
                & $choco install -y --no-progress $Packages
            } else {
                throw "Sorry, installing packages is unsupported on $script:os"
            }
        }

        function Link-Exe {
            param(
                [Parameter(Mandatory=$true)]
                [string] $ExeName,
                [Parameter(Mandatory=$true)]
                [string] $LinkName
            )

            # Full executable path, including the extension:
            $exe_path = (Get-Command $ExeName).Path
            $exe_dir = Split-Path $exe_path
            $exe_name = Split-Path $exe_path -Leaf
            $exe_ext = [System.IO.Path]::GetExtension($exe_name)

            $link_dir = if ($script:linux_host) { '/usr/local/bin' } else { $exe_dir }
            $link_name = $LinkName
            # On Windows, append .exe if required:
            if (!$script:linux_host -and [System.IO.Path]::GetExtension($link_name) -ne $exe_ext) {
                $link_name += $exe_ext
            }
            $link_path = Join-Path $link_dir $link_name

            echo "Creating link $link_path -> $exe_path"
            if ($script:linux_host) {
                sudo rm -f -- $link_path
                sudo ln -s -- $exe_path $link_path
            } else {
                if (Test-Path $link_path) {
                    Remove-Item $link_path -Force
                }
                New-Item -ItemType HardLink -Path $link_path -Value $exe_path | Out-Null
            }
        }

        if ($linux_host) {
            if ($x64) {
                $pkgs = 'clang','g++','llvm'
            } else {
                $pkgs = 'clang','g++-multilib','llvm'
            }
            Install-Package $pkgs

            Link-Exe -Exe clang -LinkName cc
            Link-Exe -Exe clang++ -LinkName c++
        } elseif ($cygwin_host) {
            if (!$x64) {
                echo @'
        ::warning ::
        32-bit-targeting Clang is unavailable on 64-bit Cygwin.
        Please use 32-bit Cygwin instead.
        If you _are_ using 32-bit Cygwin, please ignore this message.
        '@
            }

            # IDK why, but without libiconv-devel, even a "Hello, world!"
            # C++ app cannot be compiled as of December 2020. Also, libstdc++
            # is required; it's simpler to install gcc-g++ for all the
            # dependencies.
            Install-Package clang gcc-g++ libiconv-devel llvm

            Link-Exe -Exe clang -LinkName cc
            Link-Exe -Exe clang++ -LinkName c++
        } elseif ($windows_host) {
            Install-Package llvm

            $bin_dir = Join-Path $env:ProgramFiles LLVM bin
            echo $bin_dir >> $env:GITHUB_PATH

            Link-Exe -Exe (Join-Path $bin_dir clang) -LinkName cc
            Link-Exe -Exe (Join-Path $bin_dir clang++) -LinkName c++
        } else {
            throw "Sorry, installing Clang is unsupported on $os"
        }

        if ($cygwin_host) {
            # clang/clang++ are Cygwin symlinks, pointing to clang-X.exe. It's
            # convenient to make proper executables instead so that they can be
            # called from Windows' command prompt.
            echo @'
        while IFS= read -d '' -r link_path; do
            dest_path="$( readlink --canonicalize-existing -- "$link_path" )"
            dest_ext=".${dest_path##*.}"
            [ "$dest_ext" == ".$dest_path" ] && dest_ext=
            link_ext=".${link_path##*.}"
            [ "$link_ext" == ".$link_path" ] && link_ext=
            echo "Removing symlink $link_path" && rm -f -- "$link_path"
            [ "$link_ext" != "$dest_ext" ] && echo "${PATHEXT//\;/
        }" | grep -q --ignore-case --line-regexp -F -- "$dest_ext" && link_path="$link_path$dest_ext"
            echo "Creating hardlink $link_path -> $dest_path" && ln -- "$dest_path" "$link_path"
        done < <( find /usr/bin -type l -a '-(' -iname 'clang*' -o -iname 'llvm*' '-)' -print0 )
        '@ | & bash.exe --login -o errexit -o nounset -o pipefail -o igncr
        }
      shell: pwsh

branding:
  icon: star
  color: green
